/*
Given a positive integer n, you can apply one of the following operations:

If n is even, replace n with n / 2.
If n is odd, replace n with either n + 1 or n - 1.
Return the minimum number of operations needed for n to become 1.
*/

public class Solution {
    public int IntegerReplacement(int n) {

        if(n==1)
            return 0;
        else if(n%2==0){
            return IntegerReplacement(n/2)+1;
        }
        else if(n==int.MaxValue)
            return 32;
        else
        {
            return Math.Min(IntegerReplacement(n+1),IntegerReplacement(n-1))+1;

        }
    }
}
